<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubeflow on AKS ‚Äì Deployment Options</title>
    <link>https://Azure.github.io/kubeflow-aks/main/docs/deployment-options/</link>
    <description>Recent content in Deployment Options on Kubeflow on AKS</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 07 Mar 2023 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="https://Azure.github.io/kubeflow-aks/main/docs/deployment-options/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Deploy Kubeflow with Password, Ingress and TLS</title>
      <link>https://Azure.github.io/kubeflow-aks/main/docs/deployment-options/custom-password-tls/</link>
      <pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://Azure.github.io/kubeflow-aks/main/docs/deployment-options/custom-password-tls/</guid>
      <description>
        
        
        &lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;In this lab you will deploy an Azure Kubernetes Service (AKS) cluster and other Azure services (Container Registry, Managed Identity, Key Vault) with &lt;a href=&#34;https://docs.microsoft.com/cli/azure/install-azure-cli&#34;&gt;Azure CLI&lt;/a&gt; and &lt;a href=&#34;https://docs.microsoft.com/azure/azure-resource-manager/bicep/overview&#34;&gt;Bicep&lt;/a&gt;. You will then install Kubeflow after creating custom Password. This deployment option will also make use of TLS with a self-signed certificate and an ingress controller. Swap out this self signed certificate with your own CA certs for production workloads.&lt;/p&gt;
&lt;h2 id=&#34;deploy-kubeflow-with-password-ingress-and-tls&#34;&gt;Deploy Kubeflow with Password, Ingress and TLS&lt;/h2&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;


    ‚ö†Ô∏è Warning: In order to complete this deployment, you will need to have either  &lt;code&gt;User Access Admin&lt;/code&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;code&gt;Contributor&lt;/code&gt; or &lt;code&gt;Owner&lt;/code&gt; access to the subscription you are deploying into.

&lt;/div&gt;

&lt;p&gt;Use the &lt;a href=&#34;https://docs.microsoft.com/cli/azure/install-azure-cli&#34;&gt;Azure CLI&lt;/a&gt; and &lt;a href=&#34;https://docs.microsoft.com/azure/azure-resource-manager/bicep/overview&#34;&gt;Bicep&lt;/a&gt; templates to deploy the infrastructure for your application. We will be using the &lt;a href=&#34;https://github.com/Azure/AKS-Construction&#34;&gt;AKS construction&lt;/a&gt; project to rapidly deploy the required Azure resources. The project allows users the flexibility to tweak their AKS environment however they want. Please check out the &lt;a href=&#34;https://azure.github.io/AKS-Construction/&#34;&gt;AKS construction helper&lt;/a&gt; for more details about AKS construction.&lt;/p&gt;
&lt;p&gt;You can also try out the automated option using &lt;a href=&#34;https://magefile.org/&#34;&gt;Mage&lt;/a&gt; build tool at the &lt;a href=&#34;https://github.com/Azure-Samples/azure-opensource-labs/tree/main/cloud-native/aks-kubeflow#kubeflow-on-azure-kubernetes-service-aks&#34;&gt;Azure Open Source Labs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Login to the Azure CLI.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;az login
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    üí°Note: If you have access to multiple subscriptions, you may need to run the following command to work with the appropriate subscription: &lt;code&gt;az account set --subscription &amp;lt;NAME_OR_ID_OF_SUBSCRIPTION&amp;gt;&lt;/code&gt;.

&lt;/div&gt;

&lt;p&gt;Install kubectl using the Azure CLI, if required.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;az aks install-cli
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Clone this repo which includes the &lt;a href=&#34;https://github.com/Azure/AKS-Construction&#34;&gt;Azure/AKS-Construction&lt;/a&gt; and &lt;a href=&#34;https://github.com/kubeflow/manifests/tree/v1.6-branch&#34;&gt;kubeflow/manifests&lt;/a&gt; repos as &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Submodules&#34;&gt;Git Submodules&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone --recurse-submodules https://github.com/Azure/kubeflow-aks.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Change directory into the newly cloned directory&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; kubeflow-aks
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;deployment-steps&#34;&gt;Deployment steps&lt;/h2&gt;
&lt;p&gt;Get the signed in user id so that you can get admin access to the cluster you create&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;SIGNEDINUSER&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;az ad signed-in-user show --query id --out tsv&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;RGNAME&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;kubeflow
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create deployment&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;az group create -n &lt;span style=&#34;color:#000&#34;&gt;$RGNAME&lt;/span&gt; -l eastus
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;DEP&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;az deployment group create -g &lt;span style=&#34;color:#000&#34;&gt;$RGNAME&lt;/span&gt; --parameters &lt;span style=&#34;color:#000&#34;&gt;signedinuser&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$SIGNEDINUSER&lt;/span&gt; -f main.bicep -o json&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    üí°Note: The DEP variable is very important and will be used in subsequent steps. You can save it by running &lt;code&gt;echo $DEP &amp;gt; test.json&lt;/code&gt; and restore it by running &lt;code&gt;export DEP=$(cat test.json)&lt;/code&gt;.

&lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;KVNAME&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$DEP&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; jq -r &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;.properties.outputs.kvAppName.value&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;AKSCLUSTER&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$DEP&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; jq -r &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;.properties.outputs.aksClusterName.value&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;TENANTID&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;az account show --query tenantId -o tsv&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;ACRNAME&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;az acr list -g &lt;span style=&#34;color:#000&#34;&gt;$RGNAME&lt;/span&gt; --query &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;[0].name&amp;#34;&lt;/span&gt;  -o tsv&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;install-kubelogin-and-log-into-the-cluster&#34;&gt;Install kubelogin and log into the cluster&lt;/h2&gt;
&lt;p&gt;Next install kubelogin using the &lt;a href=&#34;https://github.com/Azure/kubelogin&#34;&gt;installation instructions&lt;/a&gt; appropriate for your computer. From there, you&amp;rsquo;ll need to run the following commands to download the kubeconfig file and convert it for use with kubelogin.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;az aks get-credentials --resource-group &lt;span style=&#34;color:#000&#34;&gt;$RGNAME&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --name &lt;span style=&#34;color:#000&#34;&gt;$AKSCLUSTER&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubelogin convert-kubeconfig -l azurecli
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Log in to the cluster. Enter your Azure credentials when prompted afterwards to complete the login. If this is successful, kubectl should return a list of nodes.


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;


    ‚ö†Ô∏è Warning: It is important that you log into the cluster at this point to avoid running into issues at a later point.

&lt;/div&gt;
&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get nodes
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;install-kustomize&#34;&gt;Install kustomize&lt;/h2&gt;
&lt;p&gt;Next install kustomize using the &lt;a href=&#34;https://kubectl.docs.kubernetes.io/installation/kustomize/&#34;&gt;installation instructions&lt;/a&gt; appropriate for your computer.&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    üí°Note: In order to use the &lt;code&gt;kustomize&lt;/code&gt; command below to deploy Kubeflow, you must use &lt;a href=&#34;https://github.com/kubernetes-sigs/kustomize/releases/tag/v3.2.0&#34;&gt;Kustomize v3.2.0&lt;/a&gt;. More info &lt;a href=&#34;https://github.com/kubeflow/manifests#prerequisites&#34;&gt;here&lt;/a&gt;.

&lt;/div&gt;

&lt;h2 id=&#34;install-kubeflow-with-tls-and-unique-password&#34;&gt;Install Kubeflow with TLS and Unique Password&lt;/h2&gt;
&lt;p&gt;Please note that a self-signed certificate is used for demonstration purposes. Do not use self signed certs for production workloads. You can easily swap this self-signed cert with your CA certificate for your usecase.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;


    ‚ö†Ô∏è Warning: For this deployment, we will be using a simple method for authenticating to Kubeflow. For more advanced usecases, please configure your deployment to use Azure AD.

&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The first step is to generate a new Hash/Password combination using bycrypt. There are many ways of doing this, eg by generating it &lt;a href=&#34;https://github.com/kubeflow/manifests/blob/master/README.md#change-default-user-password&#34;&gt;using python&lt;/a&gt;. For simplicity we will be using coderstool&amp;rsquo;s &lt;a href=&#34;https://www.coderstool.com/bcrypt-hash-generator&#34;&gt;Bycrypt Hash Generator&lt;/a&gt; for testing purposes. Do not do this for production workloads. In the plain text field, enter a password for your first user, then click on the &amp;ldquo;Generate Hash&amp;rdquo; button. You can generate multiple if you have multiple users.
&lt;img src=&#34;./images/brypt-password-generation.png&#34; alt=&#34;Generate password&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Head to the tls-manifest/manifests/common/dex/base/config-map.yaml file and update the hash value there (around line 22) with the hash you just generated. You can also change the email address, username and userid. In addition, you can setup multiple users by adding more users to the array. Please update the default email address in the params file located at manifests\common\user-namespace\base\params.env file if changed from default.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update your auth.md file with the new email address and password (plain text password not hash) or store the secrets in a more secure way&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copy the contents of this newly updated manifests folder to the kubeflow manifests folder. This will update the files so the deployment includes your config changes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp -r tls-manifest/manifests .
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cd to the manifests folder and install kubeflow&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; manifests
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Install all of the components via a single command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;while&lt;/span&gt; ! kustomize build example &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; kubectl apply -f -&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Retrying to apply resources&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; sleep 10&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once the command has completed, check the pods are ready&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get pods -n cert-manager
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get pods -n istio-system
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get pods -n auth
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get pods -n knative-eventing
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get pods -n knative-serving
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get pods -n kubeflow
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get pods -n kubeflow-user-example-com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart dex to ensure dex is using the updated password


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;


    ‚ö†Ô∏è Warning: It is important that you restart the dex pod by running the command below. If you don&amp;rsquo;t any previous password (including the default password 12341234 if not changed) will be used from the time the Service is exposed via &lt;code&gt;LoadBalancer&lt;/code&gt; until the time this command is run or the dex is otherwise restarted.

&lt;/div&gt;
&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl rollout restart deployment dex -n auth
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure TLS. Start by getting IP address of istio gateway&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;IP&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;kubectl -n istio-system get service istio-ingressgateway --output &lt;span style=&#34;color:#000&#34;&gt;jsonpath&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;={&lt;/span&gt;.status.loadBalancer.ingress&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;.ip&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Replace the IP address in the tls-manifest/certificate.yaml file with the IP address of the istio gateway using the sed command below


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;


    ‚ö†Ô∏è Warning: If you are using a mac you will need to change the command to &lt;code&gt;sed -i &#39;&#39; &amp;quot;s/192.168.0.5/$IP/&amp;quot; tls-manifest/certificate.yaml &lt;/code&gt;.

&lt;/div&gt;



&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    üí°Note: If these sed commands don&amp;rsquo;t work for any reason or if you don&amp;rsquo;t have sed installed, you will need to update these files manually by replacing the placeholders in the files mentioned below.

&lt;/div&gt;
&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; ..
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sed -i  &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;s/192.168.0.5/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$IP&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;/&amp;#34;&lt;/span&gt; tls-manifest/certificate.yaml 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Please note that instead of providing the IP address like we did above, you could give the LoadBalancer an Azure sub-domain (via the annotation in tls-manifest/manifests/common/istio-1-14/istio-install/base/patches/service.yaml ) and use that too. Deploy the certificate manifest file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl apply -f  tls-manifest/certificate.yaml 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You have completed the deployment. Access the dashboard by entering the IP address in a browser. You might get a warning saying the connection is unsafe. This is expected since you are using a self signed certificate. Click on advanced and proceed to the URL to view your dashboard. Log in using the email address and password in the auth.md file (assuming you updated it with your email address and password in the previous step)
&lt;img src=&#34;./images/logged-in-with-tls.png&#34; alt=&#34;Generate password&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;testing-the-deployment-with-a-notebook-server&#34;&gt;Testing the deployment with a Notebook server&lt;/h2&gt;
&lt;p&gt;You can test that the deployments worked by creating a new Notebook server using the GUI.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Click on &amp;ldquo;Create a new Notebook server&amp;rdquo;
&lt;img src=&#34;./images/create-new-notebook-server.png&#34; alt=&#34;creating a new Notebook server&#34;&gt;&lt;/li&gt;
&lt;li&gt;Click on &amp;ldquo;+ New Notebook&amp;rdquo; in the top right corner of the resulting page&lt;/li&gt;
&lt;li&gt;Enter a name for the server&lt;/li&gt;
&lt;li&gt;Leave the &amp;ldquo;jupyterlab&amp;rdquo; option selected&lt;/li&gt;
&lt;li&gt;Feel free to pick one of the images available, in this case we choose the default&lt;/li&gt;
&lt;li&gt;Set Requested CPU to 0.5 and requested memory in Gi to 1&lt;/li&gt;
&lt;li&gt;Under Data Volumes click on &amp;ldquo;+ Add new volume&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Expand the resulting section&lt;/li&gt;
&lt;li&gt;Set the name to datavol-1. The default name provided would not work because it has characters that are not allowed&lt;/li&gt;
&lt;li&gt;Set the size in Gi to 1&lt;/li&gt;
&lt;li&gt;Uncheck &amp;ldquo;Use default class&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Choose a class from the provided options. In this case I will choose &amp;ldquo;azurefile-premium&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Choose ReadWriteMany as the Access mode. Your data volume config should look like the picture below
&lt;img src=&#34;./images/data-volume-config.png&#34; alt=&#34;data volume config&#34;&gt;&lt;/li&gt;
&lt;li&gt;Click on &amp;ldquo;Launch&amp;rdquo; at the bottom of the page. A successful deployment should have a green checkmark under status, after 1-2 minutes.
&lt;img src=&#34;./images/server-provisioned-successfully-tls.png&#34; alt=&#34;deployment successful&#34;&gt;&lt;/li&gt;
&lt;li&gt;Click on &amp;ldquo;Connect&amp;rdquo; to access your jupyter lab&lt;/li&gt;
&lt;li&gt;Under Notebook, click on Python 3 to access your jupyter notebook and start coding&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;destroy-the-resources&#34;&gt;Destroy the resources&lt;/h2&gt;
&lt;p&gt;Run the command below to destroy the resources you just created after you are done testing&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-azurecli&#34; data-lang=&#34;azurecli&#34;&gt;az group delete -n $RGNAME
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Prerequisties</title>
      <link>https://Azure.github.io/kubeflow-aks/main/docs/deployment-options/prerequisites/</link>
      <pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://Azure.github.io/kubeflow-aks/main/docs/deployment-options/prerequisites/</guid>
      <description>
        
        
        &lt;h1 id=&#34;kubeflow-on-aks-prerequisites&#34;&gt;Kubeflow on AKS Prerequisites&lt;/h1&gt;
&lt;p&gt;For all Kubeflow on AKS deployment options, you will need the following&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An &lt;strong&gt;Azure Subscription&lt;/strong&gt; (e.g. &lt;a href=&#34;https://aka.ms/azure-free-account&#34;&gt;Free&lt;/a&gt; or &lt;a href=&#34;https://aka.ms/azure-student-account&#34;&gt;Student&lt;/a&gt; account)
&lt;ul&gt;
&lt;li&gt;

&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;


    ‚ö†Ô∏è Warning: In order to complete the deployments, you will need to have either  &lt;code&gt;User Access Admin&lt;/code&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;code&gt;Contributor&lt;/code&gt; or &lt;code&gt;Owner&lt;/code&gt; access to the subscription you are deploying into.

&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://docs.microsoft.com/cli/azure/install-azure-cli&#34;&gt;Azure CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;a href=&#34;https://github.com&#34;&gt;GitHub Account&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bash shell (e.g. macOS, Linux, &lt;a href=&#34;https://docs.microsoft.com/windows/wsl/about&#34;&gt;Windows Subsystem for Linux (WSL)&lt;/a&gt;, &lt;a href=&#34;https://multipass.run/&#34;&gt;Multipass&lt;/a&gt;, &lt;a href=&#34;https://docs.microsoft.com/azure/cloud-shell/quickstart&#34;&gt;Azure Cloud Shell&lt;/a&gt;, &lt;a href=&#34;https://github.com/features/codespaces&#34;&gt;GitHub Codespaces&lt;/a&gt;, &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers&#34;&gt;devcontainers&lt;/a&gt;, etc). This repository comes with a .devcontainer folder that allows you to configure your Codespaces or devcontainers environment so that it has all the required Bash tools like kubelogin and the &lt;strong&gt;correct&lt;/strong&gt; version of kustomize&lt;/li&gt;
&lt;li&gt;The following installed in your Bash shell if you are not going with the codespaces or devcontainers option
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes-sigs/kustomize/releases/download/v3.2.0/kustomize_3.2.0_linux_amd64&#34;&gt;kustomize v3.2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Azure/kubelogin/releases/download/v0.0.26/kubelogin-linux-amd64.zip&#34;&gt;kubelogin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/install&#34;&gt;Bicep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/&#34;&gt;Kubectl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gnuwin32.sourceforge.net/packages/sed.htm&#34;&gt;sed&lt;/a&gt; (optional)


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    If you have access to &lt;a href=&#34;https://docs.github.com/en/codespaces/overview&#34;&gt;GitHub Codespaces&lt;/a&gt; or &lt;a href=&#34;https://www.docker.com/products/docker-desktop/&#34;&gt;Docker Desktop&lt;/a&gt; on your local machine, it is highly recommended that you deploy this using a &lt;a href=&#34;https://code.visualstudio.com/docs/devcontainers/containers&#34;&gt;devcontainer&lt;/a&gt; as it includes all the tools you need. The configuration for the devcontainer can be found &lt;a href=&#34;https://github.com/azure/kubeflow-aks/tree/main/.devcontainer&#34;&gt;here&lt;/a&gt;.

&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Vanilla Installation</title>
      <link>https://Azure.github.io/kubeflow-aks/main/docs/deployment-options/vanilla-installation/</link>
      <pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://Azure.github.io/kubeflow-aks/main/docs/deployment-options/vanilla-installation/</guid>
      <description>
        
        
        &lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;In this lab you will deploy an Azure Kubernetes Service (AKS) cluster and other Azure services (Container Registry, Managed Identity, Key Vault) with &lt;a href=&#34;https://docs.microsoft.com/cli/azure/install-azure-cli&#34;&gt;Azure CLI&lt;/a&gt; and &lt;a href=&#34;https://docs.microsoft.com/azure/azure-resource-manager/bicep/overview&#34;&gt;Bicep&lt;/a&gt;. You will then install Kubeflow using the default settings using Kustomize and create a jupyter notebook server you can easily access on your browser.&lt;/p&gt;
&lt;h2 id=&#34;instructions-for-basic-deployment-without-tls-and-with-default-password&#34;&gt;Instructions for Basic Deployment without TLS and with Default Password&lt;/h2&gt;
&lt;p&gt;This deployment option is for testing only. To deploy with TLS, and change default password, please click here: &lt;a href=&#34;./Deploy-with-tls.md&#34;&gt;Deploy kubeflow with TLS&lt;/a&gt;.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;


    ‚ö†Ô∏è Warning: This deployment option would require users to have access to the kubernetes cluster. For a better deployment option that doesn&amp;rsquo;t have this restriction, uses TLS and shows how to change default password, please head to the [Deploy kubeflow with TLS] option.

&lt;/div&gt;

&lt;p&gt;Use the &lt;a href=&#34;https://docs.microsoft.com/cli/azure/install-azure-cli&#34;&gt;Azure CLI&lt;/a&gt; and &lt;a href=&#34;https://docs.microsoft.com/azure/azure-resource-manager/bicep/overview&#34;&gt;Bicep&lt;/a&gt; templates to deploy the infrastructure for your application. We will be using the &lt;a href=&#34;https://github.com/Azure/AKS-Construction&#34;&gt;AKS construction&lt;/a&gt; project to rapidly deploy the required Azure resources. The project allows users the flexibility to tweak their AKS environment however they want. Please check out the &lt;a href=&#34;https://azure.github.io/AKS-Construction/&#34;&gt;AKS construction helper&lt;/a&gt; for more details about AKS construction.&lt;/p&gt;
&lt;p&gt;Login to the Azure CLI.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;az login
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    üí°Note: If you have access to multiple subscriptions, you may need to run the following command to work with the appropriate subscription: &lt;code&gt;az account set --subscription &amp;lt;NAME_OR_ID_OF_SUBSCRIPTION&amp;gt;&lt;/code&gt;.

&lt;/div&gt;

&lt;p&gt;Install kubectl using the Azure CLI, if required.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;az aks install-cli
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Clone this repo which includes the &lt;a href=&#34;https://github.com/Azure/AKS-Construction&#34;&gt;Azure/AKS-Construction&lt;/a&gt; and &lt;a href=&#34;https://github.com/kubeflow/manifests/tree/v1.6-branch&#34;&gt;kubeflow/manifests&lt;/a&gt; repos as &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Submodules&#34;&gt;Git Submodules&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone --recurse-submodules https://github.com/Azure/kubeflow-aks.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Change directory into the newly cloned directory&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; kubeflow-aks
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;deployment-steps&#34;&gt;Deployment steps&lt;/h2&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;


    ‚ö†Ô∏è Warning: In order to complete this deployment, you will need to have either  &lt;code&gt;User Access Admin&lt;/code&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;code&gt;Contributor&lt;/code&gt; or &lt;code&gt;Owner&lt;/code&gt; access to the subscription you are deploying into.

&lt;/div&gt;

&lt;p&gt;Get the signed in user id so that you can get admin access to the cluster you create&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;SIGNEDINUSER&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;az ad signed-in-user show --query id --out tsv&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;RGNAME&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;kubeflow
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create deployment&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;az group create -n &lt;span style=&#34;color:#000&#34;&gt;$RGNAME&lt;/span&gt; -l eastus
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;DEP&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;az deployment group create -g &lt;span style=&#34;color:#000&#34;&gt;$RGNAME&lt;/span&gt; --parameters &lt;span style=&#34;color:#000&#34;&gt;signedinuser&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$SIGNEDINUSER&lt;/span&gt; -f main.bicep -o json&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    üí°Note: The DEP variable is very important and will be used in subsequent steps. You can save it by running &lt;code&gt;echo $DEP &amp;gt; test.json&lt;/code&gt; and restore it by running &lt;code&gt;export DEP=$(cat test.json)&lt;/code&gt;.

&lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;KVNAME&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$DEP&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; jq -r &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;.properties.outputs.kvAppName.value&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;AKSCLUSTER&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$DEP&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; jq -r &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;.properties.outputs.aksClusterName.value&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;TENANTID&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;az account show --query tenantId -o tsv&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;ACRNAME&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;az acr list -g &lt;span style=&#34;color:#000&#34;&gt;$RGNAME&lt;/span&gt; --query &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;[0].name&amp;#34;&lt;/span&gt;  -o tsv&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;install-kubelogin-and-log-into-the-cluster&#34;&gt;Install kubelogin and log into the cluster&lt;/h2&gt;
&lt;p&gt;Next install kubelogin using the &lt;a href=&#34;https://github.com/Azure/kubelogin&#34;&gt;installation instructions&lt;/a&gt; appropriate for your computer. From there, you&amp;rsquo;ll need to run the following commands to download the kubeconfig file and convert it for use with kubelogin.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;az aks get-credentials --resource-group &lt;span style=&#34;color:#000&#34;&gt;$RGNAME&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --name &lt;span style=&#34;color:#000&#34;&gt;$AKSCLUSTER&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubelogin convert-kubeconfig -l azurecli
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Log in to the cluster. Enter your Azure credentials when prompted afterwards to complete the login. If this is successful, kubectl should return a list of nodes.


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;


    ‚ö†Ô∏è Warning: It is important that you log into the cluster at this point to avoid running into issues at a later point.

&lt;/div&gt;
&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get nodes
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;install-kustomize&#34;&gt;Install kustomize&lt;/h2&gt;
&lt;p&gt;Next install kustomize using the &lt;a href=&#34;https://kubectl.docs.kubernetes.io/installation/kustomize/&#34;&gt;installation instructions&lt;/a&gt; appropriate for your computer.&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    üí°Note: In order to use the &lt;code&gt;kustomize&lt;/code&gt; command below to deploy Kubeflow, you must use &lt;a href=&#34;https://github.com/kubernetes-sigs/kustomize/releases/tag/v3.2.0&#34;&gt;Kustomize v3.2.0&lt;/a&gt;. More info &lt;a href=&#34;https://github.com/kubeflow/manifests#prerequisites&#34;&gt;here&lt;/a&gt;.

&lt;/div&gt;

&lt;h2 id=&#34;deploy-kubeflow-without-tls-using-default-password&#34;&gt;Deploy Kubeflow without TLS using Default Password&lt;/h2&gt;
&lt;p&gt;This deployment option is for testing only. To deploy with TLS, and change default password, please click here: &lt;a href=&#34;./Deploy-with-tls.md&#34;&gt;Deploy kubeflow with TLS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;From the root of the repo, &lt;code&gt;cd&lt;/code&gt; into kubeflow&amp;rsquo;s  &lt;code&gt;manifests&lt;/code&gt; directory and make sure you are in the &lt;code&gt;v1.6-branch&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; manifests/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git checkout v1.6-branch
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Install all of the components via a single command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;while&lt;/span&gt; ! kustomize build example &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; kubectl apply -f -&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Retrying to apply resources&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; sleep 10&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once the command has completed, check the pods are ready&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get pods -n cert-manager
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get pods -n istio-system
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get pods -n auth
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get pods -n knative-eventing
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get pods -n knative-serving
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get pods -n kubeflow
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get pods -n kubeflow-user-example-com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run &lt;code&gt;kubectl port-forward&lt;/code&gt; to access the Kubeflow dashboard&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl port-forward svc/istio-ingressgateway -n istio-system 8080:80
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, open &lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080&lt;/a&gt; and login with the default user&amp;rsquo;s credentials. The default email address is &lt;code&gt;user@example.com&lt;/code&gt; and the default password is &lt;code&gt;12341234&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;testing-the-deployment-with-a-notebook-server&#34;&gt;Testing the deployment with a Notebook server&lt;/h2&gt;
&lt;p&gt;You can test that the deployments worked by creating a new Notebook server using the GUI.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Click on &amp;ldquo;Create a new Notebook server&amp;rdquo;
&lt;img src=&#34;./images/create-new-notebook-server.png&#34; alt=&#34;creating a new Notebook server&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on &amp;ldquo;+ New Notebook&amp;rdquo; in the top right corner of the resulting page&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enter a name for the server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Leave the &amp;ldquo;jupyterlab&amp;rdquo; option selected&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Feel free to pick one of the images available, in this case we choose the default&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set Requested CPU to 0.5 and requested memory in Gi to 1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Under Data Volumes click on &amp;ldquo;+ Add new volume&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Expand the resulting section&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set the name to datavol-1. The default name provided would not work because it has characters that are not allowed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set the size in Gi to 1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Uncheck &amp;ldquo;Use default class&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Choose a class from the provided options. In this case I will choose &amp;ldquo;azurefile-premium&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Choose ReadWriteMany as the Access mode. Your data volume config should look like the picture below
&lt;img src=&#34;./images/data-volume-config.png&#34; alt=&#34;data volume config&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on &amp;ldquo;Launch&amp;rdquo; at the bottom of the page. A successful deployment should have a green checkmark under status, after 1-2 minutes.
&lt;img src=&#34;./images/server-provisioned-successfully.png&#34; alt=&#34;deployment successful&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on &amp;ldquo;Connect&amp;rdquo; to access your jupyter lab&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Under Notebook, click on Python 3 to access your jupyter notebook and start coding&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;
&lt;p&gt;[Secure your kubeflow cluster using TLS and stronger Password] deployment option.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
